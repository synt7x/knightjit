local test = require("tests/harness")

return section("list", function()
	describe("parsing", function()
		it("parses @ as an empty list", function()
			test.assert("[]", "@")
		end)
		it("parses , as a list of length one", function()
			test.assert("[true]", ",TRUE")
			test.assert("[[]]", ",@")
			test.assert("['hello']", ',"hello"')
		end)
	end)
	-- bounds omitted
	describe("conversions", function()
		describe("integer", function()
			it("returns its length", function()
				test.assert("0", "+0 @")
				test.assert("1", "+0 ," .. '"hello"')
				test.assert("1", "+0 ,,,@")
				test.assert("9", "+0 *,3 9")
			end)
		end)
		describe("string", function()
			it("returns an empty string for the empty list", function()
				test.assert("", "+'' @")
			end)
			it("converts its only element for length one lists", function()
				test.assert("", "+'' ,NULL")
				test.assert("123", "+'' ,123")
				test.assert("true", "+'' ,TRUE")
			end)
			it("inserts a newline between subsequent elements", function()
				test.assert("hello\ntrue\n123", "+'' ++,'hello' ,TRUE ,123")
				test.assert(string.rep("x\n", 99) .. "x", "+'' *,\"x\" 100")
			end)
			it("does not handle nested lists specially", function()
				test.assert("hello\ntrue\n123", "+'' ++,,'hello' ,,TRUE ,,123")
				test.assert(string.rep("x\ny\n", 99) .. "x\ny", '+\'\' *(+,"x" ,"y") 100')
			end)
		end)
		describe("boolean", function()
			it("returns false for an empty list", function()
				test.assert("false", "!! @")
			end)
			it("returns true for zero-like lists", function()
				test.assert("true", "!! ,0")
				test.assert("true", "!! ,FALSE")
			end)
		end)
	end)
end)
