local test = require("tests/harness")

return section("MULTIPLY", function()
	describe("when the first arg is a string", function()
		it("duplicates itself with positive integers", function()
			test.assert("", "* '' 12")
			test.assert("foo", "* 'foo' 1")
			test.assert("a1a1a1a1", "* 'a1' 4")
			test.assert("haihaihaihaihaihaihaihai", "* 'hai' 8")
		end)

		it("returns an empty string when multiplied by zero", function()
			test.assert("", "* 'hi' 0")
			test.assert("", "* 'what up?' 0")
		end)

		it("coerces the RHS to an integer", function()
			test.assert("foofoofoo", "* 'foo' '3'")
			test.assert("foo", "* 'foo' TRUE")
			test.assert("", "* 'foo' NULL")
			test.assert("", "* 'foo' FALSE")
			test.assert("foofoofoo", "* 'foo' +@123")
		end)

		it("only allows for a nonnegative duplication amount", function()
			test.refute("* 'hello' ~1")
			test.refute("* 'hello' ~4")
			test.refute("* '' ~4")
			test.refute("* '1' ~4")
		end)
	end)

	describe("when the first arg is a list", function()
		it("duplicates itself with positive integers", function()
			test.assert("[]", "* @ 12")
			test.assert("[1]", "* ,1 1")
			test.assert("['a1','a1','a1','a1']", "* ,'a1' 4")
			test.assert("[1,2,1,2,1,2]", "* +@12 3")
		end)

		it("returns an empty list when multiplied by zero", function()
			test.assert("[]", "* ,'hi' 0")
			test.assert("[]", "* ,'what up?' 0")
		end)

		it("coerces the RHS to an integer", function()
			test.assert("['foo','foo','foo']", "* ,'foo' '3'")
			test.assert("['foo']", "* ,'foo' TRUE")
			test.assert("[]", "* ,'foo' NULL")
			test.assert("[]", "* ,'foo' FALSE")
			test.assert("['foo','foo','foo']", "* ,'foo' +@123")
		end)

		it("only allows for a nonnegative duplication amount", function()
			test.refute("* ,'hello' ~1")
			test.refute("* ,'hello' ~4")
			test.refute("* @ ~4")
			test.refute("* ,'1' ~4")
		end)
	end)

	describe("when the first arg is an integer", function()
		it("works with integers", function()
			test.assert("0", "* 0 0")
			test.assert("2", "* 1 2")
			test.assert("24", "* 4 6")
			test.assert("-36", "* 12 ~3")
			test.assert("52", "* 4 13")
			test.assert("-52", "* 4 ~13")
			test.assert("-52", "* ~4 13")
			test.assert("52", "* ~4 ~13")
		end)

		it("converts other values to integers", function()
			test.assert("-2", "* 1 '-2'")
			test.assert("364", "* 91 '4'")
			test.assert("9", "* 9 TRUE")
			test.assert("0", "* 9 FALSE")
			test.assert("0", "* 9 NULL")
			test.assert("27", "* 9 +@123")
		end)

		it("errors on overflow", function()
			test.todo("overflow (need to get bit length)")
		end)
	end)

	it("evaluates arguments in order", function()
		test.assert("135", "* (= n 45) (- n 42)")
		test.assert("15", "* (= n 15) (- n 14)")
		test.assert("-15", "* (= n 15) (- n 16)")
	end)

	it("only allows an integer, string, or list as the first operand", function()
		test.refute("* TRUE 1")
		test.refute("* FALSE 1")
		test.refute("* NULL 1")
	end)

	it("does not allow a block as any operand", function()
		test.refute("; = a 3 : * (BLOCK a) 1")
		test.refute("; = a 3 : * 1 (BLOCK a)")
		test.refute("* (BLOCK QUIT 0) 1")
		test.refute("* 1 (BLOCK QUIT 0)")
	end)

	it("requires exactly two arguments", function()
		test.refute("*")
		test.refute("* 1")
		test.must("* 1 1")
	end)
end)
