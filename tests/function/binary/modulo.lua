local test = require("tests/harness")

return section("MODULO", function()
	it("modulos positive bases normally", function()
		test.assert("0", "% 1 1")
		test.assert("0", "% 4 4")
		test.assert("0", "% 15 1")
		test.assert("3", "% 123 10")
		test.assert("0", "% 15 3")
		test.assert("2", "% 14 3")
		test.assert("3", "% 3 1234")
	end)

	it("converts other values to integers", function()
		test.assert("1", "% 15 '2'")
		test.assert("3", "% 91 '4'")
		test.assert("0", "% 9 TRUE")
		test.assert("4", "% 9 +@12345")
	end)

	it("evaluates arguments in order", function()
		test.assert("5", "% (= n 45) (- n 35)")
		test.assert("7", "% (= n 17) (- n 7)")
		test.assert("4", "% (= n 15) (- n 4)")
	end)

	it("does not modulo by zero", function()
		test.refute("% 1 0")
		test.refute("% 100 0")
		test.refute("% 1 FALSE")
		test.refute("% 1 NULL")
		test.refute("% 1 @")
	end)

	it("does not allow for negative integers anywhere", function()
		test.refute("% 1 ~1")
		test.refute("% 5 ~123")
		test.refute("% 99 ~123")
		test.refute("% ~99 123")
		test.refute("% ~5 123")
		test.refute("% ~1 123")
		test.refute("% ~1 ~123")
	end)

	it("only allows an integer as the first operand", function()
		test.refute("% TRUE 1")
		test.refute("% FALSE 1")
		test.refute("% NULL 1")
		test.refute("% 'not-a-integer' 1")
		test.refute("% '123' 1")
		test.refute("% +@123 1")
	end)

	it("does not allow a block as any operand", function()
		test.refute("; = a 3 : % (BLOCK a) 1")
		test.refute("; = a 3 : % 1 (BLOCK a)")
		test.refute("% (BLOCK QUIT 0) 1")
		test.refute("% 1 (BLOCK QUIT 0)")
	end)

	it("requires exactly two arguments", function()
		test.refute("%")
		test.refute("% 1")
		test.must("% 1 1")
	end)
end)
