local test = require("tests/harness")

return section("EQUALS", function()
	describe("when the first arg is null", function()
		it("equals itself", function()
			test.assert("true", "? NULL NULL")
		end)
		it("is not equal to other values", function()
			test.assert("false", "? NULL FALSE")
			test.assert("false", "? NULL TRUE")
			test.assert("false", "? NULL 0")
			test.assert("false", "? NULL ''")
			test.assert("false", "? NULL '0'")
			test.assert("false", "? NULL 'NULL'")
			test.assert("false", "? NULL ''")
		end)
	end)

	describe("when the first arg is a boolean", function()
		it("only is equal to itself", function()
			test.assert("true", "? TRUE TRUE")
			test.assert("true", "? FALSE FALSE")
		end)
		it("is not equal to anything else", function()
			test.assert("false", "? TRUE 1")
			test.assert("false", "? TRUE '1'")
			test.assert("false", "? TRUE 'TRUE'")
			test.assert("false", "? TRUE 'true'")
			test.assert("false", "? FALSE 0")
			test.assert("false", "? FALSE ''")
			test.assert("false", "? FALSE '0'")
			test.assert("false", "? FALSE 'FALSE'")
			test.assert("false", "? FALSE 'false'")
		end)
	end)

	describe("when the first arg is an integer", function()
		it("is only equal to itself", function()
			test.assert("true", "? 0 0")
			test.assert("true", "? ~0 0")
			test.assert("true", "? 1 1")
			test.assert("true", "? ~1 ~1")
			test.assert("true", "? 912 912")
			test.assert("true", "? 123 123")
		end)
		it("is not equal to anything else", function()
			test.assert("false", "? 0 1")
			test.assert("false", "? 1 0")
			test.assert("false", "? 4 5")
			test.assert("false", "? ~4 4")
			test.assert("false", "? 0 FALSE")
			test.assert("false", "? 0 NULL")
			test.assert("false", "? 0 ''")
			test.assert("false", "? 1 TRUE")
			test.assert("false", "? 1 '1'")
			test.assert("false", "? 1 '1a'")
		end)
	end)

	describe("when the first arg is a string", function()
		it("is only equal to itself", function()
			test.assert("true", "? '' ''")
			test.assert("true", "? 'a' 'a'")
			test.assert("true", "? '0' '0'")
			test.assert("true", "? '1' '1'")
			test.assert("true", "? 'foobar' 'foobar'")
			test.assert("true", "? 'this is a test' 'this is a test'")
			test.assert("true", "? (+ \"'\" '\"') (+ \"'\" '\"')")
		end)
		it("is not equal to other strings", function()
			test.assert("false", "? '' ' '")
			test.assert("false", "? ' ' ''")
			test.assert("false", "? 'a' 'A'")
			test.assert("false", "? '0' '00'")
			test.assert("false", "? '1.0' '1'")
			test.assert("false", "? '1' '1.0'")
			test.assert("false", "? '0' '0x0'")
			test.assert("false", "? 'is this a test' 'this is a test'")
		end)
		it("is not equal to equivalent types", function()
			test.assert("false", "? '0' 0")
			test.assert("false", "? '1' 1")
			test.assert("false", "? 'T' TRUE")
			test.assert("false", "? 'TRUE' TRUE")
			test.assert("false", "? 'True' TRUE")
			test.assert("false", "? 'true' TRUE")
			test.assert("false", "? 'F' FALSE")
			test.assert("false", "? 'FALSE' FALSE")
			test.assert("false", "? 'False' FALSE")
			test.assert("false", "? 'false' FALSE")
			test.assert("false", "? 'N' NULL")
			test.assert("false", "? 'NULL' NULL")
			test.assert("false", "? 'Null' NULL")
			test.assert("false", "? '' NULL")
		end)
	end)

	describe("when the first arg is a list", function()
		it("is only equal to itself", function()
			test.assert("true", "? @ @")
			test.assert("true", "? ,@ ,@")
			test.assert("true", "? ,'a' +@'a'")
			test.assert("true", "? ,0 +@0")
			test.assert("true", "? ,'1' ,'1'")
			test.assert("true", "? +@'foobar' +@'foobar'")
			-- test.assert("true", "? ,TRUE +@TRUE")
			test.assert("true", "? +@123 ++,1,2,3")
			test.assert("true", "? *,2 4 +@2222")
			test.assert("true", "? @ GET *,2 4 0 0")
		end)
		it("is not equal to other lists", function()
			test.assert("false", "? @ ,1")
			test.assert("false", "? @ ,@")
			test.assert("false", "? ,1 @")
			test.assert("false", "? +@123 +,1,2")
		end)
		it("is not equal to equivalent types", function()
			test.assert("false", "? @ 0")
			test.assert("false", "? ,1 1")
			test.assert("false", "? @ TRUE")
			test.assert("false", "? ,1 TRUE")
			test.assert("false", "? ,TRUE TRUE")
			test.assert("false", "? @ FALSE")
			test.assert("false", "? ,0 FALSE")
			test.assert("false", "? ,FALSE FALSE")
			test.assert("false", "? @ NULL")
			test.assert("false", "? ,0 NULL")
			test.assert("false", "? ,NULL NULL")
			test.assert("false", "? @ ''")
			test.assert("false", "? ,0 '0'")
			test.assert("false", "? ,'' ''")
			test.assert("false", "? ,'hello' 'hello'")
			test.assert("false", "? +@'hello' 'hello'")
			test.assert("false", "? +@'h' 'h'")
		end)
	end)

	it("evaluates arguments in order", function()
		test.assert("true", "? (= n 45) n")
		test.assert("true", "? (= n 'mhm') n")
		test.assert("true", "? (= n TRUE) n")
		test.assert("true", "? (= n FALSE) n")
		test.assert("true", "? (= n NULL) n")
	end)

	-- it("does not allow a block as any operand", function()
	-- 	test.refute("; = a 3 : ? (BLOCK a) 1")
	-- 	test.refute("; = a 3 : ? 1 (BLOCK a)")
	-- 	test.refute("? (BLOCK QUIT 0) 1")
	-- 	test.refute("? 1 (BLOCK QUIT 0)")
	-- end)

	it("requires exactly two arguments", function()
		test.refute("?")
		test.refute("? 1")
		test.must("? 1 1")
	end)
end)
