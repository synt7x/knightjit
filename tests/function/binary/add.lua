local test = require("tests/harness")

return section("ADD", function()
	-- String concatenation
	describe("when the first arg is a string", function()
		it("concatenates", function()
			test.assert("1121a3", "+ '112' '1a3'")
			test.assert("Plato Aristotle", "+ 'Plato' ' Aristotle'")
			test.assert("Because why not?", "++ 'Because ' 'why' ' not?'")
		end)

		it("coerces to a string", function()
			test.assert("truth is true", "+ 'truth is ' TRUE")
			test.assert("falsehood is false", "+ 'falsehood is ' FALSE")
			test.assert("it is  and void", "++ 'it is ' NULL ' and void'")
			test.assert("twelve is 12", "+ 'twelve is ' 12")
			test.assert("newlines exist:1\n2\n3", "+ 'newlines exist:' +@123")
		end)

		it("can be used to coerce to a string when the lhs is empty", function()
			test.assert("true", "+ '' TRUE")
			test.assert("false", "+ '' FALSE")
			test.assert("", "+ '' NULL")
			test.assert("1234", "+ '' 1234")
			test.assert("-123", "+ '' ~123")
			test.assert("1\n2\n3", "+ '' +@123")
		end)

		it("does not reuse the same integer buffer", function()
			test.assert("1234", "; = a + '' 12 ; = b + '' 34 : + a b")
		end)
	end)

	-- Integer addition
	describe("when the first arg is an integer", function()
		it("adds other integers", function()
			test.assert("0", "+ 0 0")
			test.assert("3", "+ 1 2")
			test.assert("10", "+ 4 6")
			test.assert("111", "+ 112 ~1")
			test.assert("17", "+ 4 13")
			test.assert("-9", "+ 4 ~13")
			test.assert("9", "+ ~4 13")
			test.assert("-17", "+ ~4 ~13")
		end)

		it("converts other values to integers", function()
			test.assert("3", "+ 1 '2'")
			test.assert("95", "+ 4 '91'")
			test.assert("10", "+ 9 TRUE")
			test.assert("9", "+ 9 FALSE")
			test.assert("9", "+ 9 NULL")
			test.assert("8", "+ 5 +@123")
		end)

		it("can be used to coerce to an integer when the lhs is zero", function()
			test.assert("12", "+ 0 '12'")
			test.assert("1", "+ 0 TRUE")
			test.assert("0", "+ 0 FALSE")
			test.assert("0", "+ 0 NULL")
			test.assert("5", "+ 0 +@12345")
		end)

		it("errors on overflow", function()
			-- todo: overflow (need to get bit length)
			-- This is a placeholder for overflow test
			test.todo("overflow (need to get bit length)")
		end)
	end)

	it("evaluates arguments in order", function()
		test.assert("48", "+ (= n 45) (- n 42)")
		test.assert("16", "+ (= n 15) (- n 14)")
		test.assert("14", "+ (= n 15) (- n 16)")
	end)

	it("only allows an integer or string as the first operand", function()
		test.refute("+ TRUE 1")
		test.refute("+ FALSE 1")
		test.refute("+ NULL 1")
	end)

	it("does not allow a block as any operand", function()
		test.refute("; = a 3 : + (BLOCK a) 1")
		test.refute("; = a 3 : + 1 (BLOCK a)")
		test.refute("+ (BLOCK QUIT 0) 1")
		test.refute("+ 1 (BLOCK QUIT 0)")
	end)

	it("requires exactly two arguments", function()
		test.refute("+")
		test.refute("+ 1")
		test.must("+ 1 1")
	end)
end)
