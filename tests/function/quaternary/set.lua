local test = require("tests/harness")

return section("SET", function()
	describe("when the first argument is a string", function()
		it("can remove substrings", function()
			test.assert("bcd", 'SET "abcd" 0 1 ""')
			test.assert("ad", 'SET "abcd" 1 2 ""')
			test.assert("ab", 'SET "abcd" 2 2 ""')
			test.assert("d", 'SET "abcd" 0 3 ""')
			test.assert("", 'SET "abc" 0 3 ""')
		end)

		it("can insert substrings", function()
			test.assert("1abcd", 'SET "abcd" 0 0 "1"')
			test.assert("abcd12", 'SET "abcd" 4 0 "12"')
			test.assert("a12", 'SET "a" 1 0 "12"')
			test.assert("12", 'SET "" 0 0 "12"')
		end)

		it("can replace substrings", function()
			test.assert("a123d", 'SET "abcd" 1 2 "123"')
			test.assert("ab4445", 'SET "abcd" 2 2 "4445"')
		end)

		it("converts its arguments to the correct types", function()
			test.assert("1false34", "SET '1234' TRUE ,1 FALSE")
			test.assert("h1\n2\n3lo world", "SET 'hello world' TRUE '2' +@123")
		end)
	end)

	describe("when the first argument is a list", function()
		it("can remove sublists", function()
			test.assert("['b','c','d']", 'SET +@"abcd" 0 1 @')
			test.assert("['a','d']", 'SET +@"abcd" 1 2 @')
			test.assert("['a','b']", 'SET +@"abcd" 2 2 @')
			test.assert("['d']", 'SET +@"abcd" 0 3 @')
			test.assert("[]", 'SET +@"abc" 0 3 @')
		end)

		it("can insert sublists", function()
			test.assert("[true,'a','b','c','d']", 'SET +@"abcd" 0 0 ,TRUE')
			test.assert("['a','b','c','d',1,2]", 'SET +@"abcd" 4 0 +@12')
			test.assert("['a',1,2]", 'SET +@"a" 1 0 +@12')
			test.assert("[1,2]", "SET @ 0 0 +@12")
		end)

		it("can replace sublists", function()
			test.assert("['a',1,2,3,'d']", 'SET +@"abcd" 1 2 +@123')
			test.assert("['a','b',4,4,4,5]", 'SET +@"abcd" 2 2 +@4445')
		end)

		it("converts its arguments to the correct types", function()
			test.assert("[1,3,4]", 'SET +@1234 TRUE "1" NULL')
			test.assert("['h',1,2,3,'l','o',' ','w','o','r','l','d']", "SET +@'hello world' TRUE '2' 123")
			test.assert("['y','o',2,3,4]", 'SET +@1234 NULL ,3 "yo"')
		end)
	end)

	it("does not accept BLOCK values anywhere (strict types)", function()
		test.refute("SET (BLOCK QUIT 0) 0 0 0")
		test.refute("SET '0' (BLOCK QUIT 0) 0 0")
		test.refute("SET '0' 0 (BLOCK QUIT 0) 0")
		test.refute("SET '0' 0 0 (BLOCK QUIT 0)")
		test.refute("; = a 3 : SET (BLOCK a) 0 0 0")
		test.refute("; = a 3 : SET '0' (BLOCK a) 0 0")
		test.refute("; = a 3 : SET '0' 0 (BLOCK a) 0")
		test.refute("; = a 3 : SET '0' 0 0 (BLOCK a)")
	end)

	it("requires exactly four arguments (argument count)", function()
		test.refute("SET")
		test.refute("SET '0'")
		test.refute("SET '0' 0")
		test.refute("SET '0' 0 0")
		test.must("SET '0' 0 0 0")
	end)
end)
